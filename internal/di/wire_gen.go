// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"github.com/wongnai/xds/debug"
	"google.golang.org/grpc"
)

// Injectors from wire.go:

func InitializeServer(ctx context.Context, statsIntervalSeconds StatsIntervalSeconds) (Servers, func(), error) {
	server, cleanup := ProvideGrpcServer()
	healthServer, cleanup2 := ProvideGrpcHealthServer()
	sideEffectGrpcHealthRegistered := ProvideSideEffectGrpcHealthRegistered(server, healthServer)
	config, err := ProvideClientConfig()
	if err != nil {
		cleanup2()
		cleanup()
		return Servers{}, nil, err
	}
	v, err := ProvideK8sHTTPTransport(config)
	if err != nil {
		cleanup2()
		cleanup()
		return Servers{}, nil, err
	}
	v2 := ProvideK8sHTTPClient(v, config)
	clientset, err := ProvideK8sClient(config, v2)
	if err != nil {
		cleanup2()
		cleanup()
		return Servers{}, nil, err
	}
	snapshotter, cleanup3 := ProvideSnapshotter(ctx, clientset)
	callbackFuncs := ProvideXdsLogger()
	serverServer, cleanup4 := ProvideXdsServer(ctx, snapshotter, callbackFuncs)
	sideEffectADSRegistered := ProvideSideEffectADSRegistered(server, serverServer)
	sideEffectEDSRegistered := ProvideSideEffectEDSRegistered(server, serverServer)
	sideEffectCDSRegistered := ProvideSideEffectCDSRegistered(server, serverServer)
	sideEffectRDSRegistered := ProvideSideEffectRDSRegistered(server, serverServer)
	sideEffectLDSRegistered := ProvideSideEffectLDSRegistered(server, serverServer)
	loadReportingServiceServer := ProvideLRSServer(statsIntervalSeconds)
	sideEffectLRSRegistered := ProvideSideEffectLRSRegistered(server, loadReportingServiceServer)
	xdsAllSideEffects := XdsAllSideEffects{
		_ADS: sideEffectADSRegistered,
		_EDS: sideEffectEDSRegistered,
		_CDS: sideEffectCDSRegistered,
		_RDS: sideEffectRDSRegistered,
		_LDS: sideEffectLDSRegistered,
		_LRS: sideEffectLRSRegistered,
	}
	sideEffectGrpcReflectionRegistered := ProvideSideEffectGrpcReflectionRegisteredIfEnv(server)
	sideEffectGrpcChannelzRegistered := ProvideSideEffectGrpcChannelzRegistered(server)
	debugServer := ProvideDebugServer(snapshotter)
	servers := Servers{
		_GrpcHealth: sideEffectGrpcHealthRegistered,
		_Xds:        xdsAllSideEffects,
		_Reflection: sideEffectGrpcReflectionRegistered,
		_Channelz:   sideEffectGrpcChannelzRegistered,
		GrpcServer:  server,
		DebugServer: debugServer,
	}
	return servers, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

type Servers struct {
	_GrpcHealth SideEffectGrpcHealthRegistered
	_Xds        XdsAllSideEffects
	_Reflection SideEffectGrpcReflectionRegistered
	_Channelz   SideEffectGrpcChannelzRegistered

	GrpcServer  *grpc.Server
	DebugServer *debug.Server
}
